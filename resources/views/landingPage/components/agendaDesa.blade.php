@extends('landingPage.main')

@section('title', 'Agenda Desa - Portal Desa')

@section('content')
    <script>
        function createDateFromString(dateString) {
            // Parse date string as local date to avoid timezone offset issues
            const [year, month, day] = dateString.split('-').map(Number);
            return new Date(year, month - 1, day); // month is 0-indexed in JS Date
        }

        function formatDateToString(date) {
            // Format date to YYYY-MM-DD string in local timezone
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }
    </script>

    <!-- Page Header -->
    <section class="page-header">
        <div class="container">
            <h1>Agenda Desa</h1>
            <p>Kalender kegiatan dan acara desa yang terjadwal</p>
            <nav class="breadcrumb">
                <a href="{{ route('home') }}">Home</a> /
                <a href="{{ route('informasi-desa') }}">Informasi Desa</a> /
                <span>Agenda Desa</span>
            </nav>
        </div>
    </section>

    <!-- Agenda Controls -->
    <section class="agenda-controls">
        <div class="container">
            <div class="controls-container">
                <div class="view-toggle">
                    <button class="toggle-btn active" data-view="calendar">
                        <i class="fas fa-calendar-alt"></i>
                        Kalender
                    </button>
                    <button class="toggle-btn" data-view="list">
                        <i class="fas fa-list"></i>
                        Daftar
                    </button>
                </div>

                <div class="calendar-nav">
                    <button class="nav-btn" onclick="previousMonth()">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <div class="current-month" id="current-month">Juli 2025</div>
                    <button class="nav-btn" onclick="nextMonth()">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>

                <div class="quick-actions">
                    <button class="action-btn" onclick="goToToday()">
                        <i class="fas fa-calendar-day"></i>
                        Hari Ini
                    </button>
                    <button class="action-btn" onclick="refreshCalendarIndicators()" title="Refresh indikator agenda">
                        <i class="fas fa-sync-alt"></i>
                        Refresh
                    </button>
                    <button class="action-btn" onclick="openAddEventModal()">
                        <i class="fas fa-plus"></i>
                        Tambah Agenda
                    </button>
                </div>
            </div>
        </div>
    </section>

    <!-- Main Content -->
    <section class="main-content">
        <div class="container">
            <div class="content-grid">
                <!-- Calendar View -->
                <div class="calendar-view" id="calendar-view">
                    <div class="calendar-header">
                        <h3 class="calendar-title">Kalender Agenda Desa</h3>
                        <p class="calendar-subtitle">Klik pada tanggal untuk melihat detail agenda</p>
                    </div>

                    <div class="calendar-container">
                        <div class="calendar-grid" id="calendar-grid">
                            <!-- Calendar headers -->
                            <div class="calendar-day-header">MIN</div>
                            <div class="calendar-day-header">SEN</div>
                            <div class="calendar-day-header">SEL</div>
                            <div class="calendar-day-header">RAB</div>
                            <div class="calendar-day-header">KAM</div>
                            <div class="calendar-day-header">JUM</div>
                            <div class="calendar-day-header">SAB</div>

                            <!-- Calendar days will be generated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- List View -->
                <div class="list-view" id="list-view">
                    <div class="list-header">
                        <h3 class="calendar-title">Daftar Agenda Desa</h3>
                        <p class="calendar-subtitle">Semua agenda desa dalam tampilan daftar</p>
                    </div>
                    <div class="list-content" id="list-content">
                        <!-- List content will be generated by JavaScript -->
                    </div>
                </div>

                <!-- Sidebar -->
                <div class="agenda-sidebar">
                    <!-- Upcoming Events -->
                    <div class="upcoming-events">
                        <div class="sidebar-header">
                            <h3 class="sidebar-title">Agenda Mendatang</h3>
                            <p class="sidebar-subtitle">7 hari ke depan</p>
                        </div>
                        <div class="events-list" id="upcoming-events-list">
                            <!-- Upcoming events will be generated by JavaScript -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Event Detail Modal -->
    <div class="modal" id="event-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modal-title">Detail Agenda</h3>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            <div class="modal-body" id="modal-body">
                <!-- Modal content will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <script>
        // Sample agenda data dengan tanggal yang lebih bervariasi dan sesuai bulan aktual
        const agendaData = JSON.parse(@json($agenda ?? []));;
        // console.log(agendaData);

        // Current date and calendar state
        let currentDate = new Date();
        let currentMonth = currentDate.getMonth();
        let currentYear = currentDate.getFullYear();
        let currentView = 'calendar';

        const monthNames = [
            'Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni',
            'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'
        ];

        const dayNames = ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'];

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {

            // Set to current month (Juli 2025) for demo
            currentMonth = currentMonth; // Juli (0-indexed)
            currentYear = currentYear;

            updateCalendar();
            updateUpcomingEvents();
            setupEventListeners();

            // Force debug after initialization
            setTimeout(() => {
                debugCalendarEvents();
            }, 1000);
        });

        // Debug function to check calendar events

        function setupEventListeners() {

            // View toggle
            document.querySelectorAll('.toggle-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const view = this.getAttribute('data-view');
                    switchView(view);
                });
            });

            // Close modal on outside click
            const eventModal = document.getElementById('event-modal');
            if (eventModal) {
                eventModal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        closeModal();
                    }
                });
            }

            // ESC key to close modal
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeModal();
                }
            });
        }

        function switchView(view) {
            currentView = view;

            // Update toggle buttons
            document.querySelectorAll('.toggle-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector(`[data-view="${view}"]`).classList.add('active');

            // Show/hide views
            const calendarView = document.getElementById('calendar-view');
            const listView = document.getElementById('list-view');

            if (view === 'calendar') {
                calendarView.style.display = 'block';
                listView.classList.remove('active');
                console.log('📅 Calendar view activated');
            } else {
                calendarView.style.display = 'none';
                listView.classList.add('active');
                updateListView();
                console.log('📋 List view activated');
            }
        }

        function updateCalendar() {

            const firstDay = new Date(currentYear, currentMonth, 1);
            const lastDay = new Date(currentYear, currentMonth + 1, 0);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());

            // Update month display
            document.getElementById('current-month').textContent =
                `${monthNames[currentMonth]} ${currentYear}`;

            // Clear existing calendar days
            const calendarGrid = document.getElementById('calendar-grid');
            const existingDays = calendarGrid.querySelectorAll('.calendar-day');
            existingDays.forEach(day => day.remove());

            // Generate calendar days
            for (let i = 0; i < 42; i++) {
                const date = new Date(startDate);
                date.setDate(date.getDate() + i);

                const dayElement = createCalendarDay(date);
                calendarGrid.appendChild(dayElement);
            }
        }

        function createCalendarDay(date) {
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day';

            const today = new Date();
            const isToday = date.toDateString() === today.toDateString();
            const isCurrentMonth = date.getMonth() === currentMonth;

            // FIX 3: Use proper date formatting to prevent timezone issues
            const dateString = formatDateToString(date);

            console.log(`🗓️ Creating calendar day: ${dateString}`);

            if (isToday) {
                dayElement.classList.add('today');
                console.log(`📅 Today: ${dateString}`);
            }
            if (!isCurrentMonth) dayElement.classList.add('other-month');

            // Get events for this date - FIX 3: Proper date comparison
            const dayEvents = agendaData.filter(event => {
                console.log(`🔍 Comparing: event.date="${event.tanggal_kegiatan}" with dateString="${dateString}"`);
                return event.tanggal_kegiatan === dateString;
            });

            console.log(`📌 Found ${dayEvents.length} events for ${dateString}:`, dayEvents.map(e => e.judul_kegiatan));

            // Add visual indicators if there are events
            if (dayEvents.length > 0) {
                dayElement.classList.add('has-events');
                console.log(`✅ Added has-events class to ${dateString}`);
            }

            // Create event dots for calendar
            let eventsHTML = '';
            dayEvents.slice(0, 3).forEach((event, index) => { // Limit to 3 events per day
                const shortTitle = event.judul_kegiatan.length > 12 ? event.judul_kegiatan.substring(0, 12) + '...' : event.judul_kegiatan;
                eventsHTML += `
            <div class="event-dot type-${event.tipe_kegiatan}" onclick="event.stopPropagation(); openEventModal(${event.id})" title="${event.judul_kegiatan}">
                ${shortTitle}
            </div>
        `;
                console.log(`🎯 Added event dot for: ${event.judul_kegiatan}`);
            });

            // If more than 3 events, show count
            if (dayEvents.length > 3) {
                eventsHTML += `
            <div class="event-dot" onclick="event.stopPropagation(); showDayEvents('${dateString}')" title="Lihat semua agenda">
                +${dayEvents.length - 3} lainnya
            </div>
        `;
            }

            dayElement.innerHTML = `
        <div class="day-number">${date.getDate()}</div>
        <div class="day-events">
            ${eventsHTML}
        </div>
    `;

            // Add click handler for the entire day
            dayElement.addEventListener('click', function(e) {
                console.log(`🖱️ Clicked on day: ${dateString}`);
                if (dayEvents.length > 0) {
                    showDayEvents(dateString);
                } else {
                    console.log(`ℹ️ No events for ${dateString}`);
                }
            });

            return dayElement;
        }

        function showDayEvents(dateString) {
            const dayEvents = agendaData.filter(event => event.tanggal_kegiatan === dateString);
            // FIX 3: Use proper date parsing for display
            const eventDate = createDateFromString(dateString);
            const formattedDate = eventDate.toLocaleDateString('id-ID', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            console.log(`📅 Showing ${dayEvents.length} events for ${formattedDate}`);

            let eventsListHTML = '';
            dayEvents.forEach(event => {
                eventsListHTML += `
            <div class="list-event-item" onclick="openEventModal(${event.id})" style="margin-bottom: 1rem; cursor: pointer;">
                <div class="list-event-header">
                    <h4 class="list-event-title">${event.judul_kegiatan}</h4>
                    <div class="event-type type-${event.tipe_kegiatan}">${getEventTypeLabel(event.tipe_kegiatan)}</div>
                </div>
                <div class="list-event-description">
                    ${event.deskripsi_kegiatan}
                </div>
                <div class="list-event-meta">
                    <div class="meta-item">
                        <div class="meta-icon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="meta-text">${event.waktu_mulai_kegiatan} - ${event.waktu_selesai_kegiatan} WIB</div>
                    </div>
                    <div class="meta-item">
                        <div class="meta-icon">
                            <i class="fas fa-map-marker-alt"></i>
                        </div>
                        <div class="meta-text">${event.tempat_kegiatan}</div>
                    </div>
                </div>
            </div>
        `;
            });

            // Show in modal
            document.getElementById('modal-title').textContent = `Agenda ${formattedDate}`;
            document.getElementById('modal-body').innerHTML = eventsListHTML;
            document.getElementById('event-modal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function updateListView() {
            console.log('📋 Updating list view...');

            const listContent = document.getElementById('list-content');
            const eventsByMonth = {};

            // Group events by month
            agendaData.forEach(event => {
                const eventDate = new Date(event.tanggal_kegiatan);
                const monthYear = `${monthNames[eventDate.getMonth()]} ${eventDate.getFullYear()}`;

                if (!eventsByMonth[monthYear]) {
                    eventsByMonth[monthYear] = [];
                }
                eventsByMonth[monthYear].push(event);
            });

            // Sort events within each month by date
            Object.keys(eventsByMonth).forEach(monthYear => {
                eventsByMonth[monthYear].sort((a, b) => new Date(a.tanggal_kegiatan) - new Date(b.tanggal_kegiatan));
            });

            // Generate list HTML
            let listHTML = '';
            Object.keys(eventsByMonth).forEach(monthYear => {
                const monthEvents = eventsByMonth[monthYear];
                listHTML += `
                    <div class="month-section">
                        <h3 class="month-title">
                            <div class="month-icon">
                                <i class="fas fa-calendar-alt"></i>
                            </div>
                            ${monthYear}
                        </h3>
                        ${monthEvents.map(event => createListEventItem(event)).join('')}
                    </div>
                `;
            });

            listContent.innerHTML = listHTML;
            console.log('✅ List view updated!');
        }

        function createListEventItem(event) {
            const eventDate = new Date(event.tanggal_kegiatn);
            const formattedDate = eventDate.toLocaleDateString('id-ID', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            return `
                <div class="list-event-item" onclick="openEventModal(${event.id})">
                    <div class="list-event-header">
                        <div>
                            <h4 class="list-event-title">${event.judul_kegiatan}</h4>
                            <div class="list-event-date">${formattedDate}</div>
                        </div>
                        <div class="event-type type-${event.tipe_kegiatan}">${getEventTypeLabel(event.tipe_kegiatan)}</div>
                    </div>
                    <div class="list-event-body">
                        <div class="list-event-description">
                            ${event.deskripsi_kegiatan}
                        </div>
                        <div class="list-event-meta">
                            <div class="meta-item">
                                <div class="meta-icon">
                                    <i class="fas fa-clock"></i>
                                </div>
                                <div class="meta-text">${event.waktu_mulai_kegiatan} - ${event.waktu_selesai_kegiatan} WIB</div>
                            </div>
                            <div class="meta-item">
                                <div class="meta-icon">
                                    <i class="fas fa-map-marker-alt"></i>
                                </div>
                                <div class="meta-text">${event.tempat_kegiatan}</div>
                            </div>
                            <div class="meta-item">
                                <div class="meta-icon">
                                    <i class="fas fa-users"></i>
                                </div>
                                <div class="meta-text">${event.penyelenggara}</div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        function updateUpcomingEvents() {
            console.log('📅 Updating upcoming events...');

            const today = new Date();
            const nextWeek = new Date();
            nextWeek.setDate(today.getDate() + 7);

            const upcomingEvents = agendaData.filter(event => {
                // FIX 3: Use proper date parsing for comparison
                const eventDate = createDateFromString(event.tanggal_kegiatan);
                return eventDate >= today && eventDate <= nextWeek;
            }).sort((a, b) => createDateFromString(a.tanggal_kegiatan) - createDateFromString(b.tanggal_kegiatan));

            console.log(`📌 Found ${upcomingEvents.length} upcoming events`);

            const upcomingEventsList = document.getElementById('upcoming-events-list');
            if (upcomingEvents.length === 0) {
                upcomingEventsList.innerHTML = `
            <div style="text-align: center; padding: 2rem; color: #666;">
                <i class="fas fa-calendar-check" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                <p>Tidak ada agenda dalam 7 hari ke depan</p>
            </div>
        `;
            } else {
                upcomingEventsList.innerHTML = upcomingEvents.map(event => {
                    // FIX 3: Use proper date parsing
                    const eventDate = createDateFromString(event.tanggal_kegiatan);
                    return `
                <div class="event-item" onclick="openEventModal(${event.id})">
                    <div class="event-date">
                        <div class="event-day">${eventDate.getDate()}</div>
                        <div class="event-month">${monthNames[eventDate.getMonth()].substring(0, 3)}</div>
                    </div>
                    <div class="event-details">
                        <div class="event-title">${event.judul_kegiatan}</div>
                        <div class="event-info">
                            <div class="event-time">
                                <i class="fas fa-clock"></i>
                                ${event.waktu_mulai_kegiatan} - ${event.waktu_selesai_kegiatan} WIB
                            </div>
                            <div class="event-location">
                                <i class="fas fa-map-marker-alt"></i>
                                ${event.tempat_kegiatan}
                            </div>
                        </div>
                        <!-- FIX: Category positioned properly within event-details -->
                        <div class="event-category type-${event.tipe_kegiatan}">${getEventTypeLabel(event.tipe_kegiatan)}</div>
                    </div>
                </div>
            `;
                }).join('');
            }

            console.log('✅ Upcoming events updated!');
        }

        function openEventModal(eventId) {
            const event = agendaData.find(e => e.id === eventId);
            if (!event) {
                console.error('❌ Event not found:', eventId);
                return;
            }

            console.log('📋 Opening modal for event:', event.judul_kegiatan);

            // FIX 3: Use proper date parsing for modal display
            const eventDate = createDateFromString(event.tanggal_kegiatan);
            const formattedDate = eventDate.toLocaleDateString('id-ID', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });

            document.getElementById('modal-title').textContent = event.judul_kegiatan;
            document.getElementById('modal-body').innerHTML = `
        <!-- FIX: Category positioned safely away from close button -->
        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 2rem;">
            <div style="flex: 1;"></div>
            <div class="event-type type-${event.tipe_kegiatan}" style="
                padding: 0.5rem 1rem; 
                border-radius: 15px; 
                font-size: 0.9rem; 
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                margin-right: 1rem;
                position: relative;
                z-index: 1;
            ">${getEventTypeLabel(event.tipe_kegiatan)}</div>
        </div>
        
        <div class="modal-meta">
            <div class="modal-meta-item">
                <div class="modal-meta-label">Tanggal</div>
                <div class="modal-meta-value">${formattedDate}</div>
            </div>
            <div class="modal-meta-item">
                <div class="modal-meta-label">Waktu</div>
                <div class="modal-meta-value">${event.waktu_mulai_kegiatan} - ${event.waktu_selesai_kegiatan} WIB</div>
            </div>
            <div class="modal-meta-item">
                <div class="modal-meta-label">Lokasi</div>
                <div class="modal-meta-value">${event.tempat_kegiatan}</div>
            </div>
            <div class="modal-meta-item">
                <div class="modal-meta-label">Penyelenggara</div>
                <div class="modal-meta-value">${event.penyelenggara}</div>
            </div>
        </div>
        
        <h4 style="color: #2c3e50; margin-bottom: 1rem;">Deskripsi</h4>
        <p style="line-height: 1.8; margin-bottom: 2rem;">${event.deskripsi_kegiatan}</p>
        
        <h4 style="color: #2c3e50; margin: 2rem 0 1rem;">Peserta</h4>
        <p style="line-height: 1.6; margin-bottom: 2rem;">${event.peserta}</p>
    `;

            document.getElementById('event-modal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closeModal() {
            console.log('❌ Closing modal');
            document.getElementById('event-modal').style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        function getEventTypeLabel(type) {
            const typeLabels = {
                meeting: 'Rapat',
                social: 'Sosial',
                development: 'Pembangunan',
                training: 'Pelatihan'
            };
            return typeLabels[type] || type;
        }

        function previousMonth() {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
            console.log('⬅️ Previous month:', monthNames[currentMonth], currentYear);
            updateCalendar();
            updateUpcomingEvents();
        }

        function nextMonth() {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
            console.log('➡️ Next month:', monthNames[currentMonth], currentYear);
            updateCalendar();
            updateUpcomingEvents();
        }

        function refreshCalendarIndicators() {
            console.log('🔄 Manual refresh calendar indicators...');

            // Force re-render calendar
            updateCalendar();
            updateUpcomingEvents();

            // Show notification
            const btn = event.target.closest('.action-btn');
            const originalText = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Refresh...';
            btn.disabled = true;

            setTimeout(() => {
                btn.innerHTML = '<i class="fas fa-check"></i> Selesai!';
                setTimeout(() => {
                    btn.innerHTML = originalText;
                    btn.disabled = false;
                }, 1500);
            }, 1000);

            // Debug after refresh
            setTimeout(() => {
                debugCalendarEvents();
            }, 1200);
        }

        function goToToday() {
            const today = new Date();
            currentMonth = today.getMonth();
            currentYear = today.getFullYear();
            console.log('📅 Going to today:', monthNames[currentMonth], currentYear);
            updateCalendar();
            updateUpcomingEvents();
        }

        function openAddEventModal() {
            // Placeholder for add event functionality
            alert(
                'Fitur tambah agenda akan segera tersedia!\n\nUntuk saat ini, silakan hubungi admin desa untuk menambahkan agenda baru.'
            );
        }

        // Test function to add sample event for current day
        // function addTestEvent() {
        //     const today = new Date();
        //     const todayString = today.toISOString().split('T')[0];

        //     const testEvent = {
        //         id: 999,
        //         title: "Test Event Hari Ini",
        //         date: todayString,
        //         time: "10:00",
        //         endTime: "12:00",
        //         location: "Balai Desa",
        //         type: "meeting",
        //         description: "Event test untuk memastikan indikator kalender berfungsi.",
        //         organizer: "Admin Test",
        //         participants: "Test Users"
        //     };

        //     // Add to agenda data if not exists
        //     const exists = agendaData.find(e => e.id === 999);
        //     if (!exists) {
        //         agendaData.push(testEvent);
        //         console.log('➕ Added test event for today:', todayString);

        //         // Refresh calendar
        //         updateCalendar();
        //         updateUpcomingEvents();
        //     }
        // }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.target.matches('input, textarea')) return; // Skip if typing in form fields

            switch (e.key) {
                case 'ArrowLeft':
                    previousMonth();
                    break;
                case 'ArrowRight':
                    nextMonth();
                    break;
                case 't':
                case 'T':
                    goToToday();
                    break;
                case 'c':
                case 'C':
                    if (currentView !== 'calendar') {
                        switchView('calendar');
                    }
                    break;
                case 'l':
                case 'L':
                    if (currentView !== 'list') {
                        switchView('list');
                    }
                    break;
                case 'r':
                case 'R':
                    refreshCalendarIndicators();
                    break;
                case 'd':
                case 'D':
                    if (e.ctrlKey || e.metaKey) {
                        e.preventDefault();
                        debugCalendarEvents();
                    }
                    break;
                case 'a':
                case 'A':
                    if (e.ctrlKey || e.metaKey) {
                        e.preventDefault();
                        addTestEvent();
                    }
                    break;
            }
        });

        // Export functions for console debugging
        // window.debugCalendarEvents = debugCalendarEvents;
        window.refreshCalendarIndicators = refreshCalendarIndicators;
        // window.addTestEvent = addTestEvent;
        window.agendaData = agendaData;

        // Touch/swipe support for mobile
        let touchStartX = 0;
        let touchEndX = 0;

        document.addEventListener('touchstart', function(e) {
            touchStartX = e.changedTouches[0].screenX;
        });

        document.addEventListener('touchend', function(e) {
            touchEndX = e.changedTouches[0].screenX;
            handleSwipe();
        });

        function handleSwipe() {
            const swipeThreshold = 50;
            if (touchEndX < touchStartX - swipeThreshold) {
                // Swipe left - next month
                nextMonth();
            }
            if (touchEndX > touchStartX + swipeThreshold) {
                // Swipe right - previous month
                previousMonth();
            }
        }

        // Intersection Observer for animations
        const observerOptionsCalendar = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observerCalendar = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, observerOptionsCalendar);

        // FIX 3: ADD function untuk test - tambahkan di akhir script
        // function addTodayTestEvent() {
        //     const today = new Date();
        //     const todayString = formatDateToString(today);

        //     const testEvent = {
        //         id: 999,
        //         title: "Test Event Hari Ini",
        //         date: todayString,
        //         time: "14:00",
        //         endTime: "16:00",
        //         location: "Balai Desa",
        //         type: "meeting",
        //         description: "Event test untuk memastikan tanggal tampil dengan benar.",
        //         organizer: "Admin Test",
        //         participants: "Test Users"
        //     };

        //     // Check if test event already exists
        //     const exists = agendaData.find(e => e.id === 999);
        //     if (!exists) {
        //         agendaData.push(testEvent);
        //         updateCalendar();
        //         updateUpcomingEvents();
        //         console.log('✅ Test event added for today:', todayString);
        //     }
        // }

        // ADD ini di akhir script untuk test
        // setTimeout(addTodayTestEvent, 2000);

        // Apply animations to elements
        document.querySelectorAll('.calendar-view, .upcoming-events, .list-view').forEach(element => {
            element.style.opacity = '0';
            element.style.transform = 'translateY(30px)';
            element.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            observerCalendar.observe(element);
        });

        // Auto-refresh upcoming events every 5 minutes
        setInterval(updateUpcomingEvents, 300000);
    </script>

@endsection
